package main;
import java.io.*;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.UUID;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 * The following class creates a new directory "Users" and a new subfolder for each new user using UUID based off their
 * name. Inside this subfolder there are two .json files: Current.json, which stores active medications the user is taking
 * and, History.json, which stores all the medicine a user has ever taken.
 *
 * @author Steffen Niemeyer
 */
public class User{

    private UUID uuid; //Unique User ID.
    private File userDirectory; //This stores the directory of the current user: ./Users/{UUID}
    private JSONObject medicationObject = new JSONObject(); //Helper JSONObject class, used to help with json structure.

    private HashMap<Integer, Medication> currentMedications = new HashMap<>();
    private HashMap<Integer, Medication> historicalMedications;

    //Counter for the Current.json
    private int count = 0; //TODO: Possibly replace with more robust way of tracking medication order.

    /**
     * Generates a UUID for each user, generated by name. Also ensures that "Users" folder exists.
     * @param name  -   A User's full name.
     */
    User(String name)
    {
        this.uuid = UUID.nameUUIDFromBytes(name.getBytes());

        File usersDir = new File("Users");

        //Creates "Users" directory if it doesn't exist.
        if (!usersDir.exists())
        {
            usersDir.mkdir();
            System.out.println("Dir created.");
        }
        else System.out.println("Dir already exists.");

        //Creates directory for specified user.
        this.userDirectory = new File("Users/" + this.uuid.toString());

        if (!this.userDirectory.exists())
        {
            this.userDirectory.mkdir();
        }

        if(!(new File(userDirectory.getPath() + "/Current.json").isFile()))
        {
            try
            {
                FileWriter currentMedsFile = new FileWriter(userDirectory.getPath() + "/Current.json", false);
                currentMedsFile.write(medicationObject.toJSONString());
                currentMedsFile.close();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }

        //Gets current medication from file.
        try
        {
            JSONParser parser = new JSONParser();
            JSONObject med = (JSONObject) parser.parse(new FileReader("Users/" + this.uuid.toString() + "/Current.json"));

            for(int i = 0; i < med.size(); i++)
            {
                JSONObject medDetails = (JSONObject) med.get( "" + i); //Converts int to string, otherwise it'll return null.

                SimpleDateFormat format = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");

                this.currentMedications.put(i, new Medication((String) medDetails.get("Name"), (Date) format.parse((String) medDetails.get("Start Date")),
                        (Date) format.parse((String) medDetails.get("End Date")), ((Long) medDetails.get("Dosage")).intValue(), Unit.valueOf((String)medDetails.get("Unit")),
                        Frequency.valueOf((String) medDetails.get("Frequency")), (String) medDetails.get("Notes")));
            }

            System.out.println(this.currentMedications.size());
            this.currentMedications.forEach((k,v) -> System.out.printf("Key: %d | Value %s\n", k, ((Medication) v).getDrugName()));

        }
        catch (FileNotFoundException e)
        {
            throw new RuntimeException(e);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        catch (ParseException e)
        {
            e.printStackTrace();
        }
        catch (java.text.ParseException e)
        {
            throw new RuntimeException(e);
        }
    }

    public void addMedicineCurrent(Medication medication)
    {
        this.currentMedications.put(this.currentMedications.size(), medication);
    }

    /**
     * Takes a new medication and appends it to the end of Current.json.
     */
    public void saveCurrentMedications()
    {
        //This is JSONObject for the medicine we need to add.
        JSONObject currentMeds;

        for(int i = 0; i < this.currentMedications.size(); i++)
        {
            currentMeds = new JSONObject();
            currentMeds.put("Name", this.currentMedications.get(i).getDrugName());
            currentMeds.put("Dosage", this.currentMedications.get(i).getDosage());
            currentMeds.put("Unit", this.currentMedications.get(i).getUnit().toString());
            currentMeds.put("Frequency", this.currentMedications.get(i).getFrequency().toString());
            currentMeds.put("Start Date", this.currentMedications.get(i).getStartDate().toString());
            currentMeds.put("End Date", this.currentMedications.get(i).getEndDate().toString());
            currentMeds.put("Notes", this.currentMedications.get(i).getNotes());

            medicationObject.put(i, currentMeds); //This enforces the structure {"0": {Drug 1}, "1": {Drug 2}}
        }
        try {
            FileWriter currentMedsFile = new FileWriter(userDirectory.getPath() + "/Current.json", false);
            currentMedsFile.write(medicationObject.toJSONString());
            currentMedsFile.close();
        } catch(IOException e){
            e.printStackTrace();
        }
    }

    /**
     * Returns a medicine by the given index.
     * @param index - The index of the medicine to retrieve.
     * @return
     */
    public Medication getMedicine(int index)
    {
        return this.currentMedications.get(index);
    }

    /**
     * Returns a medicine by the given drug name.
     * @param drugName - The name of the medicine to retrieve.
     * @return
     */
    public Medication getMedicine(String drugName)
    {
        return null;
    }

    /*
     * Just to confirm everything is working, can delete later and incorporate proper JUnit testing if needed.
     */
    public static void main(String[] args)
    {
        User testUser = new User("Test User");

        testUser.addMedicineCurrent(new Medication("Test", new Date(),
                new Date(), 10, Unit.mg, Frequency.Daily, "This is a note!"));
        testUser.addMedicineCurrent(new Medication("Test 2", new Date(),
                new Date(System.currentTimeMillis() + 1000000), 15, Unit.ml, Frequency.Daily, "This is a note!"));

        testUser.saveCurrentMedications();
    }
}