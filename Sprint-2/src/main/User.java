package main;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.UUID;
import org.json.simple.JSONObject;

/**
 * The following class creates a new directory "Users" and a new subfolder for each new user using UUID based off their
 * name. Inside this subfolder there are two .json files: Current.json, which stores active medications the user is taking
 * and, History.json, which stores all the medicine a user has ever taken.
 *
 * @author Steffen Niemeyer
 */
public class User{

    private UUID uuid; //Unique User ID.
    private File userDirectory; //This stores the directory of the current user: ./Users/{UUID}
    private JSONObject meds = new JSONObject(); //Helper JSONObject class, used to help with json structure.

    //Counter for the Current.json
    private int count = 0; //TODO: Possibly replace with more robust way of tracking medication order.

    /**
     * Generates a UUID for each user, generated by name. Also ensures that "Users" folder exists.
     * @param name  -   A User's full name.
     */
    User(String name){
        this.uuid = UUID.nameUUIDFromBytes(name.getBytes());

        File usersDir = new File("Users");

        //Creates "Users" directory if it doesn't exist.
        if(!usersDir.exists())
        {
            usersDir.mkdir();
            System.out.println("Dir created.");
        }
        else System.out.println("Dir already exists.");

        //Creates directory for specified user.
        this.userDirectory = new File("Users/" + this.uuid.toString());

        if(!this.userDirectory.exists())
        {
            this.userDirectory.mkdir();
        }
    }

    /**
     * Takes a new medication and appends it to the end of Current.json.
     * @param medication - The new medication to be added to Current.json.
     */
    @SuppressWarnings("unchecked")
    public void addMedicine(Medication medication)
    {
        //This is JSONObject for the medicine we need to add.
        JSONObject currentMeds = new JSONObject();
        currentMeds.put("Name", medication.getDrugName());
        currentMeds.put("Dosage", medication.getDosage());
        currentMeds.put("Unit", medication.getUnit().toString());
        currentMeds.put("Frequency", medication.getFrequency().toString());
        currentMeds.put("Start Date", medication.getStartDate().toString());
        currentMeds.put("End Date", medication.getEndDate().toString());
        currentMeds.put("Notes", medication.getNotes());

        meds.put(count, currentMeds); //This enforces the structure {"0": {Drug 1}, "1": {Drug 2}}

        try {
            FileWriter currentMedsFile = new FileWriter(userDirectory.getPath() + "/Current.json");
            currentMedsFile.write(meds.toJSONString());
            currentMedsFile.close();
        } catch(IOException e){
            e.printStackTrace();
        }
    }

    /**
     * Returns a medicine by the given index.
     * @param index - The index of the medicine to retrieve.
     * @return
     */
    public Medication getMedicine(int index)
    {
        return null;
    }

    /**
     * Returns a medicine by the given drug name.
     * @param drugName - The name of the medicine to retrieve.
     * @return
     */
    public Medication getMedicine(String drugName)
    {
        return null;
    }

    /*
     * Just to confirm everything is working, can delete later and incorporate proper JUnit testing if needed.
     */
    public static void main(String[] args)
    {
        User testUser = new User("Test User");

        testUser.addMedicine(new Medication("Test", new Date(System.currentTimeMillis()),
                new Date(System.currentTimeMillis() + 1000000), 10, Unit.mg, Frequency.Daily, "This is a note!"));
        testUser.addMedicine(new Medication("Test 2", new Date(System.currentTimeMillis()),
                new Date(System.currentTimeMillis() + 1000000), 10, Unit.mg, Frequency.Daily, "This is a note!"));
    }
}